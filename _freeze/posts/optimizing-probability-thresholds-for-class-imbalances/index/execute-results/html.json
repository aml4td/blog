{
  "hash": "19a144534f9e9c424429712a563eb8c6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Optimizing Probability Thresholds for Class Imbalances\"\nauthor: \"Max Kuhn\"\ndate: \"2014-02-06\"\ncategories:\n  - R\n  - classification\n  - class probabilities\n  - class imbalance\n  - random forest\n  - ROC curve\ndraft: false\n---\n\n\nOne of the toughest problems in predictive model occurs when the classes have a severe imbalance. We spend [an entire chapter](http://rd.springer.com/chapter/10.1007/978-1-4614-6849-3_16) on this subject itself. One consequence of this is that the performance is generally very biased against the class with the smallest frequencies. For example, if the data have a majority of samples belonging to the first class and very few in the second class, most predictive models will maximize accuracy by predicting everything to be the first class. As a result there's usually great sensitivity but poor specificity.\n\nAs a demonstration will use a simulation system [described here](../benchmarking-machine-learning-models-using-simulation/). By default it has about a 50-50 class frequency but we can change this by altering the function argument called <tt>intercept</tt>:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: lattice\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(442)\ntraining <- twoClassSim(n = 1000, intercept = -16)\ntesting <- twoClassSim(n = 1000, intercept = -16)\n```\n:::\n\n\nIn the training set the class frequency breakdown looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(training$Class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nClass1 Class2 \n   899    101 \n```\n\n\n:::\n\n```{.r .cell-code}\n## Class1 Class2 \n##    899    101 \n```\n:::\n\n\nThere is almost a 9:1 imbalance in these data.\n\nLet's use a standard random forest model with these data using the default value of <tt>mtry</tt>. We'll also use 10-fold cross validation to get a sense of performance:\n\n```r\nset.seed(949)\nmod0 <- train(Class ~ ., data = training,\n              method = \"rf\",\n              metric = \"ROC\",\n              tuneGrid = data.frame(mtry = 3),\n              trControl = trainControl(method = \"cv\",\n                                       classProbs = TRUE,\n                                       summaryFunction = twoClassSummary))\ngetTrainPerf(mod0)\n##    TrainROC TrainSens TrainSpec method\n## 1 0.9288911      0.99 0.4736364     rf\n```\n\nThe area under the ROC curve is very high, indicating that the model has very good predictive power for these data. Here's a test set ROC curve for this model:\n\n![](rog.png){fig-align=\"center\"}\n\nThe plot shows the default probability cut off value of 50%. The sensitivity and specificity values associated with this point indicate that performance is not that good when an actual call needs to be made on a sample. \n\nOne of the most common ways to deal with this is to determine an alternate probability cut off using the ROC curve. But to do this well, another set of data (not the test set) is needed to set the cut off and the test set is used to validate it. We don't have a lot of data this is difficult since we will be spending some of our data just to get a single cut off value.\n\nAlternatively the model can be tuned, using resampling, to determine any model tuning parameters as well as an appropriate cut off for the probabilities. \n\nThe latest update to the [caret][1] package allows users to define their own modeling and prediction components. This also gives us a huge amount of flexibility for creating your own models or doing some things that were originally intended by the package. [This page][2] shows a lot of the details for creating custom models.\n\nSuppose the model has one tuning parameter and we want to look at four candidate values for tuning. Suppose we also want to tune the probability cut off over 20 different thresholds. Now we have to look at 20Ã—4=80 different models (and that is for each resample). One other feature that has been opened up his ability to use sequential parameters: these are tuning parameters that don't require a completely new model fit to produce predictions. In this case, we can fit one random forest model and get it's predicted class probabilities and evaluate the candidate probability cutoffs using these same hold-out samples. Again, there's a lot of details on [this page][2] and, without going into them, our code for these analyses can be found [here][3]. \n\n[3]: /s/code-3ljn.R\n\nBasically, we define a list of model components (such as the fitting code, the prediction code, etc.) and feed this into the train function instead of using a pre-listed model string (such as <tt>method = \"rf\"</tt>). For this model and these data, there was an 8% increase in training time to evaluate 20 additional values of the probability cut off.\n\nHow do we optimize this model? Normally we might look at the area under the ROC curve as a metric to choose our final values. In this case the ROC curve is independent of the probability threshold so we have to use something else. A common technique to evaluate a candidate threshold is see how close it is to the perfect model where sensitivity and specificity are one. Our code will use the distance between the current model's performance and the best possible performance and then have train minimize this distance when choosing it's parameters. Here is the code that we use to calculate this:\n\n[1]: https://stat.ethz.ch/pipermail/r-packages/2014/001395.html\n[2]: http://caret.r-forge.r-project.org/custom_models.html\n\n```r\nfourStats <- function (data, lev = levels(data$obs), model = NULL) {\n  ## This code will get use the area under the ROC curve and the\n  ## sensitivity and specificity values using the current candidate\n  ## value of the probability threshold.\n  out <- c(twoClassSummary(data, lev = levels(data$obs), model = NULL))\n \n  ## The best possible model has sensitivity of 1 and specifity of 1. \n  ## How far are we from that value?\n  coords <- matrix(c(1, 1, out[\"Spec\"], out[\"Sens\"]), \n                   ncol = 2, \n                   byrow = TRUE)\n  colnames(coords) <- c(\"Spec\", \"Sens\")\n  rownames(coords) <- c(\"Best\", \"Current\")\n  c(out, Dist = dist(coords)[1])\n}\n```\n\nNow let's run our random forest model and see what it comes up with for the best possible threshold:\n\n```r\nset.seed(949)\nmod1 <- train(Class ~ ., data = training,\n              ## 'modelInfo' is a list object found in the linked\n              ## source code\n              method = modelInfo,\n              ## Minimize the distance to the perfect model\n              metric = \"Dist\",\n              maximize = FALSE,\n              tuneLength = 20,\n              trControl = trainControl(method = \"cv\",\n                                       classProbs = TRUE,\n                                       summaryFunction = fourStats))\n```\n\nThe resulting model output notes that:\n\n```r\n## Tuning parameter 'mtry' was held constant at a value of 3\n## Dist was used to select the optimal model using  the smallest value.\n## The final values used for the model were mtry = 3 and threshold = 0.887.\n```\n\nUsing `ggplot(mod1)` will show the performance profile. Instead here is a plot of the sensitivity, specificity, and distance to the perfect model:\n\n![](curves.png){fig-align=\"center\"}\n\n\nYou can see that as we increase the probability cut off for the first class it takes more and more evidence for a sample to be predicted as the first class. As a result the sensitivity goes down when the threshold becomes very large. The upside is that we can increase specificity in the same way. The blue curve shows the distance to the perfect model. The value of 0.887 was found to be optimal.\n\nNow we can use the test set ROC curve to validate the cut off we chose by resampling. Here the cut off closest to the perfect model is 0.881. We were able to find a good probability cut off value without setting aside another set of data for tuning the cut off.\n\nOne great thing about this code is that it will automatically apply the optimized probability threshold when predicting new samples. Here is an example:\n\n```r\n  Class1 Class2  Class Note\n1  0.874  0.126 Class2    *\n2  1.000  0.000 Class1     \n3  0.930  0.070 Class1     \n4  0.794  0.206 Class2    *\n5  0.836  0.164 Class2    *\n6  0.988  0.012 Class1  \n```\n\nHowever we should be careful because the probability values are not consistent with our usual notion of a 50-50 cut off.\n\n(This article was originally posted at [`http://appliedpredictivemodeling.com`](https://appliedpredictivemodeling.com/blog/2014/2/1/lw6har9oewknvus176q4o41alqw2ow))",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}