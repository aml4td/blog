<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Applied Predictive Modeling Blog</title>
<link>https://blog.aml4td.org/</link>
<atom:link href="https://blog.aml4td.org/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.4</generator>
<lastBuildDate>Fri, 01 Mar 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>New Location, Same Content</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/new-location-same-content/</link>
  <description><![CDATA[ 




<p>This is the new home for the Applied Predictive Modeling blog.</p>
<p>We’ve moved it here, along with the previous blog posts, because we’re now using a format that is much easier to work with (<a href="https://quarto.org/">Quarto</a>). This will make it a lot easier to create posts<sup>1</sup>.</p>
<p>The blog is starting back up since we are actively developing our new (third) book called <em>Applied Machine Learning for Tabular Data</em> (<a href="https://aml4td.org/">aml4td</a>). We’ll post progress updates, requests for community help, discussions of technical matters, and other topics.</p>
<p>We kept the old blog name, which might be a little confusing since we are focusing on a different book. First, we wanted our posts in the same location; adding content in a new place was awkward. Second, the new book has similar topics and I’d expect we’d put similar content here.</p>
<p>Instead of having discussions inside the blog posts, we’ll create <a href="https://github.com/aml4td/blog/issues">GitHub issues</a> when we ask for community feedback and folks can respond there.</p>
<p>(The banner image is by <a href="https://unsplash.com/photos/tree-leaves-macro-photography-Jq3WI9IQgEs?utm_content=creditShareLink&amp;utm_medium=referral&amp;utm_source=unsplash">Dmytro Tolokonov</a>)</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Our old site was started around 2010. GitHub was barely a thing and we were years away from R’s markdown/rmarkdown/blogdown packages. We used Squarespace to host the blog, and it was fine but unwieldy for what we were doing.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>books</category>
  <category>blog</category>
  <guid>https://blog.aml4td.org/posts/new-location-same-content/</guid>
  <pubDate>Fri, 01 Mar 2024 05:00:00 GMT</pubDate>
  <media:content url="https://blog.aml4td.org/posts/new-location-same-content/dmytro-tolokonov-Jq3WI9IQgEs-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>2022 tidymodels user survey</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/2022-tidymodels-user-survey/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/2022-tidymodels-user-survey/Screen+Shot+2021-10-07+at+1.25.38+PM.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We are conducting another survey to see where users would like us to spend our development time.</p>
<p>Here’s a link to <a href="https://conjoint.qualtrics.com/jfe/form/SV_3gtKaK8G1Z1JC50?Q_CHL=social&amp;Q_SocialSource=tidyverseblog">the survey</a>!</p>
<p>(This article was originally posted at <a href="http://appliedpredictivemodeling.com/blog/2021/10/7/2022-tidymodels-user-survey"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>RStudio</category>
  <category>tidymodels</category>
  <guid>https://blog.aml4td.org/posts/2022-tidymodels-user-survey/</guid>
  <pubDate>Thu, 07 Oct 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>tidymodels updates and voting!</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/tidymodels-updates-and-voting/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/tidymodels-updates-and-voting/tm-banner-small.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>While I’m still supporting <code>caret</code>, the majority of my development effort has gone into the tidyverse modeling packages (called <em>tidymodels</em>).</p>
<p>If you’ve never heard of this, we have just made an excellent learning resources at <a href="https://www.tidymodels.org/"><code>tidymodels.org</code></a>. You might consider focusing on the <a href="https://www.tidymodels.org/start/"><em>Get Started</em></a> pages.</p>
<p>Another item of note: help us <em>guide development</em> of this ecosystem by voting for new features! Vote <a href="https://twitter.com/juliasilge/status/1254879555979849729?s=20&amp;t=FhcmAZLKtfBvp_P7PDkzkw">here</a>.</p>
<p>(This article was originally posted at <a href="http://appliedpredictivemodeling.com/blog/2020/4/27/tidymodels-updates-and-voting"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>tidymodels</category>
  <guid>https://blog.aml4td.org/posts/tidymodels-updates-and-voting/</guid>
  <pubDate>Mon, 27 Apr 2020 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Slides from R/Pharma</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/slides-from-rpharma/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/slides-from-rpharma/tpost_lung.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>My slides from the R/Pharma conference on “Modeling in the Tidyverse” are in <a href="RPharma_18_Kuhn.pdf">pdf format</a> as well as the <a href="RPharma_18_Kuhn.zip">HTML version</a>.</p>
<p>(Joe Cheng just killed it in his shiny presentation - see <a href="https://github.com/jcheng5/rpharma-demo">this repo</a>)</p>
<p>(This article was originally posted at <a href="http://appliedpredictivemodeling.com/blog/rpharma18"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>presentations</category>
  <category>shiny</category>
  <category>tidyverse</category>
  <guid>https://blog.aml4td.org/posts/slides-from-rpharma/</guid>
  <pubDate>Thu, 16 Aug 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>R/Medicine conference</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/rmedicine-conference/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/rmedicine-conference/infer.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’ll be giving a talk at the R/Medicine conference on Sept 7th in New Haven CT.</p>
<p>My talk is on modeling in the tidyverse but there are some excellent speakers. Rob Tibshirani, Mike Lawrence, Jennifer Thompson, and a bunch of others will be there.</p>
<p>Take look at the <a href="http://r-medicine.com/">conference website</a> for more details.</p>



 ]]></description>
  <category>R</category>
  <category>presentations</category>
  <guid>https://blog.aml4td.org/posts/rmedicine-conference/</guid>
  <pubDate>Wed, 15 Aug 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Podcast on Nonclinical Statistics</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/podcast-on-nonclinical-statistics/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/podcast-on-nonclinical-statistics/DjXIG2TV4AAHmX3.jpeg" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><a href="https://twitter.com/hugobowne">Hugo Bowne-Anderson</a> and I spoke about about data science in pharmaceuticals, the tidyverse, and more for the excellent <a href="https://www.datacamp.com/community/podcast">DataFramed</a> podcast from DataCamp. Listen to it <a href="https://www.datacamp.com/community/podcast/data-science-pharmaceuticals">here</a> or through your favorite blogging app.</p>
<p>(This article was originally posted at <a href="http://appliedpredictivemodeling.com/blog/2018/7/30/podcast-on-nonclinical-statistics"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>presentations</category>
  <category>podcast</category>
  <guid>https://blog.aml4td.org/posts/podcast-on-nonclinical-statistics/</guid>
  <pubDate>Sat, 30 Jun 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Early draft of our “Feature Engineering and Selection” book</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/early-draft-of-our-feature-engineering-and-selection-book/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/early-draft-of-our-feature-engineering-and-selection-book/model_process.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Kjell and I are writing another book on predictive modeling, this time focused on all the things that you can do with predictors. It’s about 60% done and we’d love to get feedback. You cna take a look at <a href="http://feat.engineering">http://feat.engineering</a> and provide feedback at <a href="https://github.com/topepo/FES/issues">https://github.com/topepo/FES/issues</a>.</p>
<p>The current TOC is:</p>
<ol type="1">
<li>Introduction</li>
<li>Illustrative Example: Predicting Risk of Ischemic Stroke</li>
<li>A Review of the Predictive Modeling Process</li>
<li>Exploratory Visualizations</li>
<li>Encoding Categorical Predictors</li>
<li>Engineering Numeric Predictors</li>
<li><em>Detecting Interaction Effects</em> (these later chapters are not finished yet)</li>
<li><em>Flattening Profile Data</em></li>
<li><em>Handling Missing Data</em></li>
<li><em>Feature Engineering Without Overfitting</em></li>
<li><em>Feature Selection</em></li>
</ol>
<p>(This article was originally posted at <a href="http://appliedpredictivemodeling.com/blog/2018/5/13/early-draft-of-our-feature-engineering-and-selection-book"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>books</category>
  <category>feature selection</category>
  <category>feature engineering</category>
  <guid>https://blog.aml4td.org/posts/early-draft-of-our-feature-engineering-and-selection-book/</guid>
  <pubDate>Mon, 14 May 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>tidyposterior slides</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/tidyposterior-slides/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/tidyposterior-slides/repeats.gif" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p><a href="https://topepo.github.io/tidyposterior/"><code>tidyposterior</code></a> is an R package for comparing models based on their resampling statistics. There are a few case studies on the webpage to illustrate the process.</p>
<p>I gave a talk at the <a href="https://odsc.com/boston">Open Data Science Conference (ODSC)</a> yesterday. A pdf of the slides are <a href="Comparing_Models_Using_Resampling_and_Bayesian_Methods.pdf">here</a>.</p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/odsc18"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>presentations</category>
  <category>tidyposterior</category>
  <category>resampling</category>
  <category>Bayesian models</category>
  <guid>https://blog.aml4td.org/posts/tidyposterior-slides/</guid>
  <pubDate>Fri, 04 May 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>New Workshop in Washington DC (August)</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/new-workshop-in-washington-dc-august/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/new-workshop-in-washington-dc-august/Ames_lat.jpeg" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’ll be conducting a workshop called <a href="https://www.rstudio.com/workshops/applied-machine-learning/">“Applied Machine Learning”</a> in Washington DC on August 15 and 16. The last one, at the RStudio conference, sold out quickly.</p>
<p>The 2 day course is a blend of <code>caret</code> and the newer tidy modeling pacakges (<code>recipes</code>, <code>rsample</code>, etc):</p>
<blockquote class="blockquote">
<p>Machine learning is the study and application of algorithms that learn from and make predictions on data. From search results to self-driving cars, it has manifested itself in all areas of our lives and is one of the most exciting and fast-growing fields of research in the world of data science.</p>
</blockquote>
<blockquote class="blockquote">
<p>This two-day course will provide an overview of using R for supervised learning. The session will step through the process of building, visualizing, testing, and comparing models that are focused on prediction. The goal of the course is to provide a thorough workflow in R that can be used with many different regression or classification techniques. Case studies on real data will be used to illustrate the functionality and several different predictive models are illustrated.</p>
</blockquote>
<blockquote class="blockquote">
<p>The course focuses on both high-level approaches to modeling (e.g., the caret package) and newer modeling packages in the tidyverse: recipes, rsample, yardstick, and tidyposterior. <strong>Basic familiarity with R and the tidyverse is required.</strong></p>
</blockquote>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2018/4/10/new-workshop-in-washington-dc-august"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>training</category>
  <category>caret</category>
  <category>tidyverse</category>
  <guid>https://blog.aml4td.org/posts/new-workshop-in-washington-dc-august/</guid>
  <pubDate>Tue, 10 Apr 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Tidy Resampling Redux with Agricultural Economics Data</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/tidy-resampling-redux-with-agricultural-economics-data/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/tidy-resampling-redux-with-agricultural-economics-data/UNADJUSTEDNONRAW_thumb_265a.jpeg" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>(No statistical graphs in this one. This is what my dog Artemis looks like when she wants my attention during work hours.)</p>
<p>Mindy L. Mallory (<a href="https://twitter.com/ace_prof"><code>@ace_prof</code></a>) wrote a blog post on <a href="http://blog.mindymallory.com/2018/02/machine-learning-and-econometrics-model-selection-and-assessment-statistical-learning-style/"><em>Machine Learning and Econometrics: Model Selection and Assessment Statistical Learning Style</em></a> where she has a great description of the variance-bias tradeoff, resampling, and model complexity using some data from agricultural economics. I asked if I could take her code and make a more <a href="https://cran.r-project.org/web/packages/tidyverse/vignettes/manifesto.html">tidy</a> version of the resampling part. Here it is…</p>
<p>Here are the R packages that I’ll be using:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsample)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span></code></pre></div>
<p>First, duplicate the process of reading in the data and adding two new columns:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">stocks  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://blog.mindymallory.com/wp-content/uploads/2018/02/stocks.csv'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">USStockUse =</span> USEndingStocks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>USTotalUse, </span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WorldStockUse =</span> ROWEndingStocks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>WorldTotalUse</span>
<span id="cb2-6">  )</span>
<span id="cb2-7">stocks</span></code></pre></div>
<pre><code>## # A tibble: 43 x 8
##     Year USEndingStocks ROWEndingStocks USTotalUse
##    &lt;int&gt;          &lt;dbl&gt;           &lt;int&gt;      &lt;dbl&gt;
##  1  1975           633.           36411      5767.
##  2  1976          1136.           39491      5789.
##  3  1977          1436.           40833      6207.
##  4  1978          1710.           47957      6995.
##  5  1979          2034.           59481      7604.
##  6  1980          1392.           67180      7282.
##  7  1981          2537.           62725      6975.
##  8  1982          3523.           60273      7249.
##  9  1983          1006.           63421      6693.
## 10  1984          1648.           76287      7032.
## # ... with 33 more rows, and 4 more variables:
## #   WorldTotalUse &lt;int&gt;, PriceRecievedFarmers &lt;dbl&gt;,
## #   USStockUse &lt;dbl&gt;, WorldStockUse &lt;dbl&gt;</code></pre>
<p>The blog post has an excellent description of cross-validation and looked at five different models that encoded the US and World stock-use predictors. Either a log- or inverse-transformation was applied and then polynomial basis functions were used on these features to demonstrate overfitting.</p>
<p>The blog post has some <code>for</code> loops to do the resampling and I volunteered to show how to do it with some tidy modeling packages.</p>
<section id="tidy-cross-validation" class="level3">
<h3 class="anchored" data-anchor-id="tidy-cross-validation">Tidy Cross-Validation</h3>
<p>First, let’s take the <em>easy</em> part. Instead of using <code>for</code> loops, we can use the new infrastructure in the tidyverse to resample the model. The <a href="https://topepo.github.io/rsample"><code>rsample</code></a> package has some functions for different types of resampling and we will use the same procedure as the original post:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">918</span>)</span>
<span id="cb4-2">resamp_info <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vfold_cv</span>(stocks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">v =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-3">resamp_info</span></code></pre></div>
<pre><code>## #  5-fold cross-validation 
## # A tibble: 5 x 2
##   splits       id   
##   &lt;list&gt;       &lt;chr&gt;
## 1 &lt;S3: rsplit&gt; Fold1
## 2 &lt;S3: rsplit&gt; Fold2
## 3 &lt;S3: rsplit&gt; Fold3
## 4 &lt;S3: rsplit&gt; Fold4
## 5 &lt;S3: rsplit&gt; Fold5</code></pre>
<p>The first column in the tibble is a set of “<code>rsplit</code>” objects that define how the data are split for each fold of cross-validation. Each one fully and efficiently encapsulates everything what is needed to get the two divisions of the original data. In <code>rsample</code>, to avoid naming confusion, we label the two resulting data sets as:</p>
<ul>
<li><p>The <strong>analysis data</strong> are those that we selected in the resample. For a bootstrap, this is the sample with replacement. For 5-fold cross-validation, this is the 80% of the data. These data are often used to fit a model or calculate a statistic in traditional bootstrapping.</p></li>
<li><p>The <strong>assessment data</strong> are usually the section of the original data not covered by the analysis set. Again, in 5-fold CV, this is the 20% held out. These data are often used to evaluate the performance of a model that was fit to the analysis data.</p></li>
</ul>
<p>To get these partitions for the first split there are functions <code>analysis</code> and <code>assessment</code> that return the appropriate data frames when given an <code>rsplit</code>:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># printing just shows the #rows per analysis/assessment/overall</span></span>
<span id="cb6-2">resamp_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<pre><code>## &lt;34/9/43&gt;</code></pre>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data used for modeling:</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analysis</span>(resamp_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<pre><code>## # A tibble: 34 x 8
##     Year USEndingStocks ROWEndingStocks USTotalUse
##    &lt;int&gt;          &lt;dbl&gt;           &lt;int&gt;      &lt;dbl&gt;
##  1  1975           633.           36411      5767.
##  2  1976          1136.           39491      5789.
##  3  1977          1436.           40833      6207.
##  4  1979          2034.           59481      7604.
##  5  1980          1392.           67180      7282.
##  6  1981          2537.           62725      6975.
##  7  1982          3523.           60273      7249.
##  8  1983          1006.           63421      6693.
##  9  1984          1648.           76287      7032.
## 10  1985          4040.           75069      6494.
## # ... with 24 more rows, and 4 more variables:
## #   WorldTotalUse &lt;int&gt;, PriceRecievedFarmers &lt;dbl&gt;,
## #   USStockUse &lt;dbl&gt;, WorldStockUse &lt;dbl&gt;</code></pre>
<p>The first model for the data contained the US stock-use data with an inverse transformation. Let’s side-step the polynomial model tuning for now and just fit a quadratic model. To make things easier, I’ll define a function that can be used to fit the model when given an <code>rsplit</code> object and return the holdout mean squared error (MSE):</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">glm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(split, ...) {</span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the data used ot fit the model aka the "analysis" set</span></span>
<span id="cb10-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and fit the model with a formula given in the ...</span></span>
<span id="cb10-4">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analysis</span>(split), ...)</span>
<span id="cb10-5">  </span>
<span id="cb10-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get predictions on the other data (aka the "assessment" set </span></span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and compute some metrics</span></span>
<span id="cb10-8">  holdout <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assessment</span>(split)</span>
<span id="cb10-9">  </span>
<span id="cb10-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute performance using the yardstick package</span></span>
<span id="cb10-11">  rmse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> holdout <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod, holdout)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> PriceRecievedFarmers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> pred)</span>
<span id="cb10-14">  rmse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-15">}</span></code></pre></div>
<p>We can use this with any formula since it is just passed to <code>glm</code> using the ellipses. For example to get the holdout MSE estimate for the first fold:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm_results</span>(resamp_info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> PriceRecievedFarmers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poly</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> USStockUse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<pre><code>## [1] 1.67</code></pre>
<p>To get these statistics for all folds, <code>purrr::map_dbl</code> is used to add another column:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">resamp_info <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> resamp_info <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model_1_deg_2 =</span> </span>
<span id="cb13-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(</span>
<span id="cb13-5">        splits, </span>
<span id="cb13-6">        glm_results, </span>
<span id="cb13-7">        PriceRecievedFarmers <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poly</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> USStockUse, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-8">      )</span>
<span id="cb13-9">  )</span>
<span id="cb13-10">resamp_info</span></code></pre></div>
<pre><code>## #  5-fold cross-validation 
## # A tibble: 5 x 3
##   splits       id    model_1_deg_2
## * &lt;list&gt;       &lt;chr&gt;         &lt;dbl&gt;
## 1 &lt;S3: rsplit&gt; Fold1         1.67 
## 2 &lt;S3: rsplit&gt; Fold2         0.558
## 3 &lt;S3: rsplit&gt; Fold3         0.596
## 4 &lt;S3: rsplit&gt; Fold4         9.58 
## 5 &lt;S3: rsplit&gt; Fold5         0.248</code></pre>
<p>That’s a lot of variation in the outcome! The mean value is fairly consistent with the blog post though:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">resamp_info <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(model_1_deg_2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>()</span></code></pre></div>
<pre><code>## model_1_deg_2 
##          2.53</code></pre>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MSE = 2.675 in the blog post</span></span></code></pre></div>
<p><em>K</em>-fold cross-validation is one of the noisiest resampling methods so this difference isn’t too surprising.</p>
<p>This same process could be repeated for each polynomial degree to get new columns for this model (we’ll discuss this below). The good things about doing things this way:</p>
<ul>
<li>It is a lot cleaner (so far) than doing <code>for</code> loops.</li>
<li>Other tidyverse infrastructure can be used. For example, <a href="https://topepo.github.io/tidyposterior"><code>tidyposterior</code></a> is a great way to do model comparisons with resampling and Bayesian analysis.</li>
<li>It is simple to change resampling methods. Suppose you wanted to change to a larger number of bootstrap resamples (given the variance shown above). The same infrastructure can be easily exchanged; <code>resample::bootstraps</code> is used in place of <code>rsample::vfold_cv</code>.</li>
</ul>
</section>
<section id="tidy-model-specification-maybe" class="level3">
<h3 class="anchored" data-anchor-id="tidy-model-specification-maybe">Tidy Model Specification (maybe)</h3>
<p>The model specification part is, for me, a lot more difficult to tidy. It would be good to be able to state what predictors that we want, specify the polynomial degree, and have a function to generate the appropriate formula. The original post sensibly just types the terms out.</p>
<p>I spent some time thinking about how we could use <a href="https://adv-r.hadley.nz/expressions.html">expressions</a> and tidy evaluation (<a href="https://t.co/xEhCKne2mM">video from Hadley</a>) to make it a little less script-like. The problem is that the solution took me a while to write and, arguably, it doesn’t really buy you much more than the original code (apart from the potential copy/paste duplication errors).</p>
<p>In any case, the function uses <code>rlang</code> to manipulate expressions to make the formula. The inputs are expressions of <em>how</em> the predictors are used (i.e.&nbsp;log, inverse, etc.) and the degree. It captures the expression (without evaluating it), substitutes it into the polynomial function, then creates the formula:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">make_formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb18-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Capture the expression so it is not evaluated</span></span>
<span id="cb18-3">  var_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(...)</span>
<span id="cb18-4">  </span>
<span id="cb18-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a template expression</span></span>
<span id="cb18-6">  inv_poly <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poly</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> degree))</span>
<span id="cb18-7"></span>
<span id="cb18-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use a wrapper around rlang::call_modify to reverse the</span></span>
<span id="cb18-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># order of the arguments so that we can map over the</span></span>
<span id="cb18-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predictor expressions</span></span>
<span id="cb18-11">  add_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(arg, call, ...)</span>
<span id="cb18-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call_modify</span>(call, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> arg, ...)</span>
<span id="cb18-13">  </span>
<span id="cb18-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the variables and the degree into the template</span></span>
<span id="cb18-15">  poly_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(var_expr, add_args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> inv_poly, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> degree)</span>
<span id="cb18-16">  </span>
<span id="cb18-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to character</span></span>
<span id="cb18-18">  poly_char <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(poly_expr, deparse)</span>
<span id="cb18-19">  </span>
<span id="cb18-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to a formula</span></span>
<span id="cb18-21">  poly_char <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(poly_char, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" + "</span>)</span>
<span id="cb18-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.formula</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PriceRecievedFarmers ~"</span>, poly_char))</span>
<span id="cb18-23">}</span>
<span id="cb18-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For example:</span></span>
<span id="cb18-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_formula</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>USStockUse, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(WorldStockUse), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">degree =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<pre><code>## PriceRecievedFarmers ~ poly(x = 1/USStockUse, degree = 3) + poly(x = log(WorldStockUse), 
##     degree = 3)
## &lt;environment: 0x7fdf40b64840&gt;</code></pre>
<p>From here, we could use a bunch of <code>mutate</code> commands like the one shown above or write a slightly smaller <code>for</code> loop to work across the polynomial degrees. While the function above works well, the overall approach to working across models isn’t particularly satisfying.</p>
<p>Any suggestions? I’m on twitter <a href="https://twitter.com/topepos"><code>@topepos</code></a>!</p>
<p>(edit - fix fixed the formula call!)</p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2018/3/12/2s3j82ctkrhxugq7hf3myoeeb49k8u"><code>http://appliedpredictivemodeling.com</code></a>)</p>


</section>

 ]]></description>
  <category>R</category>
  <category>rsample</category>
  <category>resampling</category>
  <category>purrr</category>
  <category>tidyverse</category>
  <category>cross-validation</category>
  <guid>https://blog.aml4td.org/posts/tidy-resampling-redux-with-agricultural-economics-data/</guid>
  <pubDate>Mon, 12 Mar 2018 04:00:00 GMT</pubDate>
</item>
<item>
  <title>RStudio 2018 Conference Presentation and Materials</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/rstudio-2018-conference-presentation-and-materials/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/rstudio-2018-conference-presentation-and-materials/bayes-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We’ve released our videos of the talks at the 2018 RStudio conference. My talk was Modeling in the Tidyverse <a href="https://www.rstudio.com/resources/videos/modeling-in-the-tidyverse/">(video)</a> and I was also in the Tidyverse fireside chat <a href="https://youtu.be/Ol1FjFR2IMU?t=27720">(video)</a>. There are a lot of great talks on the <a href="https://www.rstudio.com/resources/webinars/">conference website</a>.</p>
<p>I also conducted a two day workshop on <code>caret</code> and the new modeling packages (<a href="https://topepo.github.io/recipes/"><code>recipes</code></a>, <a href="https://topepo.github.io/rsample/"><code>rsample</code></a>, <a href="https://topepo.github.io/tidyposterior/"><code>tidyposterior</code></a> and others) at the conference. The was no video of that, but all of the materials can be found in the <a href="https://github.com/topepo/rstudio-conf-2018">course GitHub repository</a>.</p>
<p>There will be at least one other workshop for this year on these topics. When that is finalized, I’ll post the details here and on <a href="https://twitter.com/topepos">on twitter</a>.</p>
<p>(the image above is from the workshop and is from <a href="https://topepo.github.io/tidyposterior/"><code>tidyposterior</code></a>)</p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2018/3/4/rstudio-2018-conference-presentation-and-materials"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>presentations</category>
  <category>caret</category>
  <category>rsample</category>
  <category>recipes</category>
  <category>tidyposterior</category>
  <category>RStudio</category>
  <guid>https://blog.aml4td.org/posts/rstudio-2018-conference-presentation-and-materials/</guid>
  <pubDate>Sun, 04 Mar 2018 05:00:00 GMT</pubDate>
</item>
<item>
  <title>While you wait for that to finish, can I interest you in parallel processing?</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/while-you-wait-for-that-to-finish-can-i-interest-you-in-parallel-processing/</link>
  <description><![CDATA[ 




<p><code>caret</code> has been able to <a href="https://topepo.github.io/caret/parallel-processing.html">utilize parallel processing</a> for some time (before it was on CRAN in October 2007) using slightly different versions of the package. Around September of 2011, <code>caret</code> started using the <a href="https://cran.r-project.org/package=foreach"><code>foreach</code></a> package was used to “harmonize” the parallel processing technologies thanks to a super smart guy named Steve Weston.</p>
<p>I’ve done a few benchmarks to quantify the benefits to parallel processing over the years. I just did another set since I just got a new iMacPro. This time, I put the code and results in a <a href="https://github.com/topepo/par-caret-bench">GitHub repo</a>. The main questions that I wanted to answer were:</p>
<ul>
<li>Is the benefit the same across computers and operating systems?</li>
<li>Is there any performance difference between parallel processing technologies (or packages)?</li>
<li>For my test cases, is it better to parallelize resampling loops or the individual model fit?</li>
</ul>
<p>The task I used was to tune a boosted classification tree model (via the <a href="https://cran.r-project.org/package=xgboost"><code>xgboost</code></a>) package over 25 random values of the seven tuning parameters. The data were simulated and contained 2,000 training set points and 115 numeric predictors. Five repeats of 10-fold cross-validation was used so that 1,250 separate models could be run in parallel. An example of the code is <a href="https://github.com/topepo/par-caret-bench/blob/master/macOS/2017%20iMacPro1%2C1%203%20GHz%20Intel%20Xeon%20W%2010core/xgb_01.R">here</a>.</p>
<p>I tested this using three machines:</p>
<ul>
<li>A 2015 MacBookPro (version 11,4) with a 2.5 GHz Intel Core i7 processor. It has 4 physical cores.</li>
<li>A <a href="https://pcpartpicker.com/list/4xzqr7">DIY machine</a> built in January of 2016 using a 3.4 GHz Intel Core i7 processor (6 cores).</li>
<li>A 2017 iMacPro (1,1) with a 3 GHz Intel Xeon W processor. There are 10 cores.</li>
</ul>
<p>All the computers have &gt;=8GB of memory. The DIY machine was running Ubuntu 16.04 as well as Windows 10. All of the builds used R 3.4.2 or higher.</p>
<p>The methods for parallelization were:</p>
<ul>
<li><p><strong>forking</strong> uses the <code>fork</code> system call to create new instances of the session (i.e.&nbsp;workers) that run parts of the computations. This is available on MacOS, unix, and linux. It is available to <code>foreach</code> via the <code>doMC</code> and <code>doParallel</code> packages. Historically, I have used <code>doMC</code> for my work but both were tested here.</p></li>
<li><p><strong>sockets</strong> via the <code>doParallel</code> package. I don’t know a whole lot about socket connections but they have been around a long time via the <code>snow</code> package and can run on all major operating systems.</p></li>
<li><p><strong>threading</strong>: <code>xgboost</code> has the option to use <a href="http://www.openmp.org/"><code>openMP</code></a> to parallelize the individual model fits.</p></li>
</ul>
<p>This <a href="https://www.jstatsoft.org/article/view/v031i01">JSS paper from 2009</a> might be helpful.</p>
<p>Once nice thing about parallelism in <code>caret</code> is that you do not have to modify the package code. With <code>foreach</code>, you simply “register” a parallel backend and the <code>caret</code> functions automatically utilize the workers.</p>
<p>To be clear, the forking/socket approaches split the 1,250 model fits across the workers while the threading affects each individual model fit (one-at-a-time).</p>
<p>In each case, different number of workers were applied to the problems and the execution time was measured. Since these are all recent Intel processors, <a href="https://en.wikipedia.org/wiki/Hyper-threading">hyper-threading</a> can be used. This means that, even though you have <em>X</em> physical cores, there are <em>2X</em> “logical cores” that can perform independent operations. For that reason, we can add more workers than physical cores. The order of all runs were randomized and run in clear R sessions.</p>
<p>First, let’s look at the non-threading results. The raw execution times were:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/while-you-wait-for-that-to-finish-can-i-interest-you-in-parallel-processing/par-plot-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>When converted to <em>speed-ups</em>, we get:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/while-you-wait-for-that-to-finish-can-i-interest-you-in-parallel-processing/par-plot-su-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The speed-up is the sequential time divided by the parallel time; a speed-up of 3 means that the parallel execution took a third less time than the sequential code.</p>
<p>My observations:</p>
<ul>
<li>As expected, the desktops were substantially faster than the laptop. The speeds also rank-ordered with the age of the computer.</li>
<li>On the same machine, linux ran faster than windows by slightly less than a fold.</li>
<li>It appears that the speed-ups are <em>linear</em> up until we go beyond the number of physical cores. There is incremental benefit to using logical cores but it is small.</li>
<li>I’ve never seen a case where performance get’s substantially worse as you increase the number of workers. If the model is already fast (e.g.&nbsp;PLS) or your workers exceed system memory, this isn’t an issue.</li>
<li>There was no real difference in performance between forking and sockets (at least using <code>doParallel</code>).</li>
<li>The new iMacPro does really well. The speed-ups are linear up until about 8 or 9 cores. This means that an execution time of 38 minutes can be cut down to 4 or 5 minutes.</li>
</ul>
<p>The <code>doMC</code> results are strange. When the number of workers is a multiple of 5, there is a performance hit. At first I thought this was an aberration until it was apparent that it occurred over two operating systems and three computers. Also, it is specific to <code>doMC</code>; forking using <code>doParallel</code> does not have the same issue. I’ve notified the <code>doMC</code> package maintainer about it.</p>
<p>What about threading? These runs had <code>foreach</code> run sequentially and allowed <code>xgb.train</code> to run in parallel by adjusting the <code>nthread</code> argument. The results:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/while-you-wait-for-that-to-finish-can-i-interest-you-in-parallel-processing/threads-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>This isn’t so great and really surprising (or fair). We are starting and stopping threads 1,250 times across the model tuning process. In general, we want to parallelize the longest running part of the algorithm. I have no doubt of the utility of threading the computations <em>for a single model</em> but it can be counterproductive when model is called repeatedly.</p>
<p>The code and results can be found <a href="https://github.com/topepo/par-caret-bench">here</a> if you are interested in more details.</p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2018/1/17/parallel-processing"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>caret</category>
  <category>parallel processing</category>
  <category>iMacPro</category>
  <category>xgboost</category>
  <guid>https://blog.aml4td.org/posts/while-you-wait-for-that-to-finish-can-i-interest-you-in-parallel-processing/</guid>
  <pubDate>Wed, 17 Jan 2018 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Lots of Package News</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/lots-of-package-news/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/lots-of-package-news/recipes_rsample.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’ve sent a slew of packages to CRAN recently (thanks to Swetlana and Uwe). There are updates to:</p>
<ul>
<li><p><a href="https://topepo.github.io/caret"><code>caret</code></a> was primarily updated to deal with an issue introduced in the last version. It is a good idea to avoid fully loading the underlying modeling packages to avoid name conflicts. We made that change in the last version and it ended up being more complex than thought. A quirk in the regression tests missed it too but the whole thing can be avoided by <em>loading the modeling package</em>. <a href="https://cran.r-project.org/web/packages/caret/news.html"><code>news</code> file</a></p></li>
<li><p><a href="https://topepo.github.io/rsample"><code>rsample</code></a> had some modest additions including bridges to <code>caret</code> and <code>recipes</code>. The website added more application examples (times series and survival analysis). <a href="https://topepo.github.io/rsample/news/"><code>news</code> file</a></p></li>
<li><p><a href="https://topepo.github.io/recipes"><code>recipes</code></a> had more substantial enhancments including six new steps, a better interface for creating interactions (using <a href="https://topepo.github.io/recipes/reference/selections.html">selectors</a>), and the ability to save the processed data in a sparse format. <a href="topepo.github.io/recipes/news/"><code>news</code> file</a></p></li>
<li><p><a href="https://topepo.github.io/Cubist/"><code>Cubist</code></a> and <a href="https://topepo.github.io/C5.0/"><code>C50</code></a> have been updated and brought into the age of <code>roxygen</code> and <code>pkgdown</code>. <code>C5.0</code> now has a nice plot method <em>a la</em> <code>partykit</code> and now has a vignette. I’ll be adding a few features to each over time.</p></li>
</ul>
<p>Two <strong>new</strong> packages:</p>
<ul>
<li><p><a href="https://topepo.github.io/yardstick"><code>yardstick</code></a> contains many of the performance measurement methods in <code>caret</code> but in a format that is easier to use with <code>dplyr</code> syntax and functional programming.</p></li>
<li><p><a href="https://topepo.github.io/tidyposterior"><code>tidyposterior</code></a> is a Bayesian version of <code>caret</code>’s <code>resamples</code> function. It can be used to take the resampling results from multiple models and do more formal statistical comparisons. It is similar <em>in spirit</em> to <a href="http://jmlr.org/papers/v18/16-305.html">Benavoli et al (2017)</a>. We are looking for <a href="https://twitter.com/dataandme/status/930820142900174848"><strong><em>nominations for the hex logo</em></strong></a> so please offer your suggestions (but keep it clean).</p></li>
</ul>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2017/11/15/some-package-updates"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>caret</category>
  <category>recipes</category>
  <category>C5.0</category>
  <category>Cubist</category>
  <category>Bayesian models</category>
  <guid>https://blog.aml4td.org/posts/lots-of-package-news/</guid>
  <pubDate>Mon, 11 Dec 2017 05:00:00 GMT</pubDate>
</item>
<item>
  <title>caret Cheatsheet</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/caret-cheatsheet/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/caret-cheatsheet/cheatsheet-thumb.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>It can be found on the <a href="https://www.rstudio.com/resources/cheatsheets/">RStudio cheatsheet page</a>. Suggestions and <a href="https://github.com/rstudio/cheatsheets/blob/master/source/caret-cheatsheet.key">pull requests</a> are always welcome.</p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2017/9/12/caret-cheatsheet"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>RStudio</category>
  <guid>https://blog.aml4td.org/posts/caret-cheatsheet/</guid>
  <pubDate>Tue, 12 Sep 2017 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Nested Resampling with rsample</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/nested-resampling-with-rsample/</link>
  <description><![CDATA[ 




<p>A typical scheme for splitting the data when developing a predictive model is to create an initial split of the data into a training and test set. If resampling is used, it is executed on the training set where a series of binary splits is created. In <code>rsample</code>, we use the term analysis set for the data that are used to fit the model and the assessment set is used to compute performance:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/nested-resampling-with-rsample/diagram.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>A common method for tuning models is grid search where a candidate set of tuning parameters is created. The full set of models for every combination of the tuning parameter grid and the resamples is created. Each time, the assessment data are used to measure performance and the average value is determined for each tuning parameter.</p>
<p>The potential problem is, once we pick the tuning parameter associated with the best performance, this value is usually quoted as the performance of the model. There is serious potential for <em>optimization bias</em> since we uses the same data to tune the model and quote performance. This can result in an optimistic estimate of performance.</p>
<p>Nested resampling does an additional layer of resampling that separates the tuning activities from the process used to estimate the efficacy of the model. An outer resampling scheme is used and, for every split in the outer resample, another full set of resampling splits are created on the original analysis set. For example, if 10-fold cross-validation is used on the outside and 5-fold cross-validation on the inside, a total of 500 models will be fit. The parameter tuning will be conducted 10 times and the best parameters are determined from the average of the 5 assessment sets.</p>
<p>Once the tuning results are complete, a model is fit to each of the outer resampling splits using the best parameter associated with that resample. The average of the outer method’s assessment sets are a unbiased estimate of the model.</p>
<p>To get started, let’s load the packages that will be used in this post.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rsample)   </span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mlbench)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kernlab)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sessioninfo)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>())</span></code></pre></div>
<p>We will simulate some regression data to illustrate the methods. The function <code>mlbench::mlbench.friedman1</code> can simulate a complex regression data structure from the <a href="https://scholar.google.com/scholar?hl=en&amp;q=%22Multivariate+adaptive+regression+splines%22&amp;btnG=&amp;as_sdt=1%2C7&amp;as_sdtp=">original MARS publication</a>. A training set size of 100 data points are generated as well as a large set that will be used to characterize how well the resampling procedure performed.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sim_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb2-2">  tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlbench.friedman1</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">  tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(tmp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, tmp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y)</span>
<span id="cb2-4">  tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(tmp)</span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(tmp)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(tmp)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span></span>
<span id="cb2-6">  tmp</span>
<span id="cb2-7">}</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9815</span>)</span>
<span id="cb2-10">train_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sim_data</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-11">large_dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sim_data</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<p>To get started, the types of resampling methods need to be specified. This isn’t a large data set, so 5 repeats of 10-fold cross validation will be used as the outer resampling method that will be used to generate the estimate of overall performance. To tune the model, it would be good to have precise estimates for each of the values of the tuning parameter so 25 iterations of the bootstrap will be used. This means that there will eventually be 5 * 10 * 25 = 1250 models that are fit to the data per tuning parameter. These will be discarded once the performance of the model has been quantified.</p>
<p>To create the tibble with the resampling specifications:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nested_cv</span>(train_dat, </span>
<span id="cb3-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outside =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vfold_cv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repeats =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), </span>
<span id="cb3-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inside =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstraps</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>))</span>
<span id="cb3-4">results</span>
<span id="cb3-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # 10-fold cross-validation repeated 5 times </span></span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Nested : vfold_cv(repeats = 5) / bootstraps(25) </span></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 50 x 4</span></span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          splits      id    id2   inner_resamples</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          &lt;list&gt;   &lt;chr&gt;  &lt;chr&gt;            &lt;list&gt;</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1 &lt;S3: rsplit&gt; Repeat1 Fold01 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 &lt;S3: rsplit&gt; Repeat1 Fold02 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 &lt;S3: rsplit&gt; Repeat1 Fold03 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 &lt;S3: rsplit&gt; Repeat1 Fold04 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 &lt;S3: rsplit&gt; Repeat1 Fold05 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 &lt;S3: rsplit&gt; Repeat1 Fold06 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 &lt;S3: rsplit&gt; Repeat1 Fold07 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8 &lt;S3: rsplit&gt; Repeat1 Fold08 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 &lt;S3: rsplit&gt; Repeat1 Fold09 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 &lt;S3: rsplit&gt; Repeat1 Fold10 &lt;tibble [25 x 2]&gt;</span></span>
<span id="cb3-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 40 more rows</span></span></code></pre></div>
<p>The splitting information for each resample is contained in the split objects. Focusing on the second fold of the first repeat:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;90/10/100&gt;</span></span></code></pre></div>
<p><code>&lt;90/10/100&gt;</code> indicates the number of data in the analysis set, assessment set, and the original data.</p>
<p>Each element of <code>inner_resamples</code> has its own tibble with the bootstrapping splits.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inner_resamples[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]</span>
<span id="cb5-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Bootstrap sampling with 25 resamples </span></span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 25 x 2</span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          splits          id</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##          &lt;list&gt;       &lt;chr&gt;</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1 &lt;S3: rsplit&gt; Bootstrap01</span></span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 &lt;S3: rsplit&gt; Bootstrap02</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 &lt;S3: rsplit&gt; Bootstrap03</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 &lt;S3: rsplit&gt; Bootstrap04</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 &lt;S3: rsplit&gt; Bootstrap05</span></span>
<span id="cb5-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 &lt;S3: rsplit&gt; Bootstrap06</span></span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 &lt;S3: rsplit&gt; Bootstrap07</span></span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8 &lt;S3: rsplit&gt; Bootstrap08</span></span>
<span id="cb5-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 &lt;S3: rsplit&gt; Bootstrap09</span></span>
<span id="cb5-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 &lt;S3: rsplit&gt; Bootstrap10</span></span>
<span id="cb5-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ... with 15 more rows</span></span></code></pre></div>
<p>These are self-contained, meaning that the bootstrap sample is aware that it is a sample of a specific 90% of the data:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inner_resamples[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb6-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;90/37/90&gt;</span></span></code></pre></div>
<p>To start, we need to define how the model will be created and measured. For our example, a radial basis support vector machine model will be created using the function <code>kernlab::ksvm</code>. This model is generally thought of as having two tuning parameters: the SVM <code>cost</code> value and the kernel parameter <code>sigma.</code> For illustration, only the cost value will be tuned and the function <code>kernlab::sigest</code> will be used to estimate sigma during each model fit. This is automatically done by <code>ksvm.</code></p>
<p>After the model is fit to the analysis set, the root-mean squared error (RMSE) is computed on the assessment set. One important note: for this model, it is critical to center and scale the predictors before computing dot products. We don’t do this operation here because <code>mlbench.friedman1</code> simulates all of the predictors to be standard uniform random variables.</p>
<p>Our function to fit a single model and compute the RMSE is:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `object` will be an `rsplit` object from our `results` tibble</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `cost` is the tuning parameter</span></span>
<span id="cb7-3">svm_rmse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cost =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb7-4">  y_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data)</span>
<span id="cb7-5">  mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ksvm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analysis</span>(object),  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> cost)</span>
<span id="cb7-6">  holdout_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assessment</span>(object)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_col])</span>
<span id="cb7-7">  rmse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assessment</span>(object)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> holdout_pred)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb7-8">  rmse</span>
<span id="cb7-9">}</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In some case, we want to parameterize the function over the tuning parameter:</span></span>
<span id="cb7-12">rmse_wrapper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cost, object) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">svm_rmse</span>(object, cost)</span></code></pre></div>
<p>For the nested resampling, a model needs to be fit for each tuning parameter and each bootstrap split. To do this, a wrapper can be created:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `object` will be an `rsplit` object for the bootstrap samples</span></span>
<span id="cb8-2">tune_over_cost <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object) {</span>
<span id="cb8-3">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cost =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-4">  results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RMSE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cost, </span>
<span id="cb8-5">                          rmse_wrapper,</span>
<span id="cb8-6">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">object =</span> object)</span>
<span id="cb8-7">  results</span>
<span id="cb8-8">}</span></code></pre></div>
<p>Since this will be called across the set of outer cross-validation splits, another wrapper is required:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `object` is an `rsplit` object in `results$inner_resamples` </span></span>
<span id="cb9-2">summarize_tune_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object) {</span>
<span id="cb9-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return row-bound tibble that has the 25 bootstrap results</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_df</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits, tune_over_cost) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each value of the tuning parameter, compute the </span></span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># average RMSE which is the inner bootstrap estimate. </span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cost) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_RMSE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(RMSE, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb9-9">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(RMSE))</span>
<span id="cb9-10">}</span></code></pre></div>
<p>Now that those functions are defined, we can execute all the inner resampling loops:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">tuning_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inner_resamples, summarize_tune_results) </span></code></pre></div>
<p>tuning_results is a list of data frames for each of the 50 outer resamples.</p>
<p>Let’s make a plot of the averaged results to see what the relationship is between the RMSE and the tuning parameters for each of the inner bootstrapping operations:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pooled_inner <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tuning_results <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> bind_rows</span>
<span id="cb11-2"></span>
<span id="cb11-3">best_cost <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dat) dat[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.min</span>(dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mean_RMSE),]</span>
<span id="cb11-4"></span>
<span id="cb11-5">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(pooled_inner, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cost, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mean_RMSE)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trans=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log2'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SVM Cost"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inner RMSE"</span>)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(tuning_results))</span>
<span id="cb11-10">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> tuning_results[[i]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">best_cost</span>(tuning_results[[i]]), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb11-13"></span>
<span id="cb11-14">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> pooled_inner, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb11-15">p</span>
<span id="cb11-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `geom_smooth()` using method = 'loess'</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/nested-resampling-with-rsample/rmse-plot-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Each grey line is a separate bootstrap resampling curve created from a different 90% of the data. The blue line is a loess smooth of all the results pooled together.</p>
<p>To determine the best parameter estimate for each of the outer resampling iterations:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">cost_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tuning_results <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_df</span>(best_cost) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(cost) </span>
<span id="cb12-2">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(results, cost_vals)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(results, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(cost))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SVM Cost"</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/nested-resampling-with-rsample/choose-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Most of the resamples produced an optimal cost values of 2.0 but the distribution is right-skewed due to the flat trend in the resampling profile once the cost value becomes 10 or larger.</p>
<p>Now that we have these estimates, we can compute the outer resampling results for each of the 50 splits using the corresponding tuning parameter value:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RMSE <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2_dbl</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits, results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cost, svm_rmse)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RMSE)</span>
<span id="cb13-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. </span></span>
<span id="cb13-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   1.086   2.183   2.562   2.689   3.191   4.222</span></span></code></pre></div>
<p>The RMSE estimate using nested resampling is 2.69.</p>
<p>What is the RMSE estimate for the non-nested procedure when only the outer resampling method is used? For each cost value in the tuning grid, 50 SVM models are fit and their RMSE values are averaged. The table of cost values and mean RMSE estimates is used to determine the best cost value. The associated RMSE is the biased estimate.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">not_nested <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>splits, tune_over_cost) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb14-2">  bind_rows</span>
<span id="cb14-3"></span>
<span id="cb14-4">outer_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> not_nested <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cost) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outer_RMSE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(RMSE),</span>
<span id="cb14-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(RMSE))</span>
<span id="cb14-8">outer_summary</span>
<span id="cb14-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 11 x 3</span></span>
<span id="cb14-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      cost outer_RMSE     n</span></span>
<span id="cb14-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;</span></span>
<span id="cb14-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1   0.25   3.565595    50</span></span>
<span id="cb14-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2   0.50   3.119439    50</span></span>
<span id="cb14-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3   1.00   2.775602    50</span></span>
<span id="cb14-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4   2.00   2.609950    50</span></span>
<span id="cb14-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5   4.00   2.639033    50</span></span>
<span id="cb14-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6   8.00   2.755651    50</span></span>
<span id="cb14-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7  16.00   2.831902    50</span></span>
<span id="cb14-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8  32.00   2.840183    50</span></span>
<span id="cb14-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9  64.00   2.833896    50</span></span>
<span id="cb14-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 128.00   2.831717    50</span></span>
<span id="cb14-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 11 256.00   2.836863    50</span></span>
<span id="cb14-23"></span>
<span id="cb14-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(outer_summary, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cost, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> outer_RMSE)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trans=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log2'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SVM Cost"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inner RMSE"</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/nested-resampling-with-rsample/not-nested-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The non-nested procedure estimates the RMSE to be 2.61. Both estimates are fairly close and would end up choosing a cost parameter value of 2.0.</p>
<p>The approximately true RMSE for an SVM model with a cost value of 2.0 and be estimated with the large sample that was simulated at the beginning.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">finalModel <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ksvm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> train_dat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-2">large_pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(finalModel, large_dat[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(large_dat)])</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((large_dat<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> large_pred)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb15-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 2.696096</span></span></code></pre></div>
<p>The nested procedure produces a closer estimate to the approximate truth but the non-nested estimate is very similar. There is some optimization bias here but it is very small (for these data and this model).</p>
<p>The R markdown document used to create this post can be found <a href="nested_svm.Rmd">here</a></p>
<p>The session information is:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">session_info</span>()</span>
<span id="cb16-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ─ Session info ──────────────────────────────────────────────────────────</span></span>
<span id="cb16-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  setting  value                       </span></span>
<span id="cb16-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  version  R version 3.3.3 (2017-03-06)</span></span>
<span id="cb16-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  os       macOS Sierra 10.12.6        </span></span>
<span id="cb16-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  system   x86_64, darwin13.4.0        </span></span>
<span id="cb16-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  ui       X11                         </span></span>
<span id="cb16-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  language (EN)                        </span></span>
<span id="cb16-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  collate  en_US.UTF-8                 </span></span>
<span id="cb16-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  tz       America/New_York            </span></span>
<span id="cb16-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  date     2017-09-03                  </span></span>
<span id="cb16-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb16-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ─ Packages ──────────────────────────────────────────────────────────────</span></span>
<span id="cb16-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  package     * version  date       source         </span></span>
<span id="cb16-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  assertthat    0.2.0    2017-04-11 CRAN (R 3.3.2) </span></span>
<span id="cb16-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  bindr         0.1      2016-11-13 CRAN (R 3.3.2) </span></span>
<span id="cb16-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  bindrcpp    * 0.2      2017-06-17 cran (@0.2)    </span></span>
<span id="cb16-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  broom       * 0.4.2    2017-02-13 CRAN (R 3.3.2) </span></span>
<span id="cb16-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  clisymbols    1.2.0    2017-05-21 CRAN (R 3.3.2) </span></span>
<span id="cb16-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  colorspace    1.3-2    2016-12-14 CRAN (R 3.3.2) </span></span>
<span id="cb16-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  dplyr       * 0.7.2    2017-07-20 cran (@0.7.2)  </span></span>
<span id="cb16-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  evaluate      0.10.1   2017-06-24 CRAN (R 3.3.2) </span></span>
<span id="cb16-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  foreign       0.8-67   2016-09-13 CRAN (R 3.3.3) </span></span>
<span id="cb16-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  ggplot2     * 2.2.1    2016-12-30 CRAN (R 3.3.2) </span></span>
<span id="cb16-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  glue          1.1.1    2017-06-21 CRAN (R 3.3.2) </span></span>
<span id="cb16-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  gtable        0.2.0    2016-02-26 CRAN (R 3.3.0) </span></span>
<span id="cb16-27"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  highr         0.6      2016-05-09 CRAN (R 3.3.0) </span></span>
<span id="cb16-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  kernlab     * 0.9-25   2016-10-03 CRAN (R 3.3.0) </span></span>
<span id="cb16-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  knitr       * 1.17     2017-08-10 CRAN (R 3.3.2) </span></span>
<span id="cb16-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  labeling      0.3      2014-08-23 CRAN (R 3.3.0) </span></span>
<span id="cb16-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  lattice       0.20-35  2017-03-25 CRAN (R 3.3.3) </span></span>
<span id="cb16-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  lazyeval      0.2.0    2016-06-12 CRAN (R 3.3.0) </span></span>
<span id="cb16-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  magrittr      1.5      2014-11-22 CRAN (R 3.3.0) </span></span>
<span id="cb16-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  mlbench     * 2.1-1    2012-07-10 CRAN (R 3.3.0) </span></span>
<span id="cb16-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  mnormt        1.5-5    2016-10-15 CRAN (R 3.3.0) </span></span>
<span id="cb16-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  munsell       0.4.3    2016-02-13 CRAN (R 3.3.0) </span></span>
<span id="cb16-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  nlme          3.1-131  2017-02-06 CRAN (R 3.3.3) </span></span>
<span id="cb16-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  pkgconfig     2.0.1    2017-03-21 cran (@2.0.1)  </span></span>
<span id="cb16-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  plyr          1.8.4    2016-06-08 CRAN (R 3.3.0) </span></span>
<span id="cb16-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  psych         1.7.3.21 2017-03-22 CRAN (R 3.3.2) </span></span>
<span id="cb16-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  purrr       * 0.2.3    2017-08-02 cran (@0.2.3)  </span></span>
<span id="cb16-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  R6            2.2.2    2017-06-17 cran (@2.2.2)  </span></span>
<span id="cb16-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  Rcpp          0.12.12  2017-07-15 cran (@0.12.12)</span></span>
<span id="cb16-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  reshape2      1.4.2    2016-10-22 CRAN (R 3.3.3) </span></span>
<span id="cb16-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  rlang         0.1.2    2017-08-09 cran (@0.1.2)  </span></span>
<span id="cb16-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  rsample     * 0.0.1    2017-07-08 CRAN (R 3.3.3) </span></span>
<span id="cb16-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  scales      * 0.5.0    2017-08-24 CRAN (R 3.3.2) </span></span>
<span id="cb16-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  sessioninfo * 1.0.0    2017-06-21 CRAN (R 3.3.2) </span></span>
<span id="cb16-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  stringi       1.1.5    2017-04-07 CRAN (R 3.3.2) </span></span>
<span id="cb16-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  stringr       1.2.0    2017-02-18 CRAN (R 3.3.2) </span></span>
<span id="cb16-51"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  tibble        1.3.4    2017-08-22 cran (@1.3.4)  </span></span>
<span id="cb16-52"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  tidyr         0.7.0    2017-08-16 cran (@0.7.0)  </span></span>
<span id="cb16-53"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  withr         2.0.0    2017-07-28 CRAN (R 3.3.2)</span></span></code></pre></div>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2017/9/2/njdc83d01pzysvvlgik02t5qnaljnd"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>resampling</category>
  <category>rsample</category>
  <category>cross-validation</category>
  <category>R</category>
  <guid>https://blog.aml4td.org/posts/nested-resampling-with-rsample/</guid>
  <pubDate>Mon, 04 Sep 2017 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Nonclinical Statistics Position in New England</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/nonclinical-statistics-position-in-new-england/</link>
  <description><![CDATA[ 




<p>I try to limit postings about jobs here, there is an interesting position in pharma for a statistician in New England.</p>
<p>I’ve had this particular position before as a nonclinical statistician and really loved the work and the scientific collaborations. It is the kind of position that lets you use a wide set of skills; there is very little rote data analysis.</p>
<p>Link: <a href="https://pfizer.wd1.myworkdayjobs.com/PfizerCareers/job/USA---MA---Cambridge-Kendall-Sq-700-Main/Associate-Director--Statistics_1603363">Nonclinical Statistician</a></p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2017/7/27/nonclinical-statistics-position-in-new-england"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <guid>https://blog.aml4td.org/posts/nonclinical-statistics-position-in-new-england/</guid>
  <pubDate>Thu, 27 Jul 2017 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Do Resampling Estimates Have Low Correlation to the Truth? The Answer May Shock You.</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/</link>
  <description><![CDATA[ 




<p>One criticism that is often leveled against using resampling methods (such as cross-validation) to measure model performance is that there is no correlation between the CV results and the true error rate.</p>
<p>Let’s look at this with some simulated data. While this assertion is often correct, there are a few reasons why you shouldn’t care.</p>
<section id="the-setup" class="level3">
<h3 class="anchored" data-anchor-id="the-setup">The Setup</h3>
<p>First, I simulated some 2-class data using <a href="../benchmarking-machine-learning-models-using-simulation/">this simulation system</a>. There are 15 predictors in the data set. Many nonlinear classification models can achieve an area under the ROC curve in the low 0.90’s on these data. The training set contained 500 samples and a 125 sample test set was also simulated.</p>
<p>I used a radial basis function support vector machine to model the data with a single estimate of the kernel parameter <code>sigma</code> and 10 values of the SVM cost parameter (on the log2 scale). The code for this set of simulations can be found <a href="TODO">here</a> so that you can reproduce the results.</p>
<p>Models were fit for each of the 10 submodels and five repeats of 10-fold cross-validation were used to measure the areas under the ROC curve. The test set results were also calculated as well as a large sample test set that approximates the truth (and is labeled as such below). All the results were calculated for all of the 10 SVM submodels (over cost). This simulation was conducted 50 times. Here is one example of how the cost parameter relates to the area under the ROC curve:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/low_corr_example.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="the-bad-news" class="level3">
<h3 class="anchored" data-anchor-id="the-bad-news">The Bad News</h3>
<p>When you look at the results, there is little to no correlation between the resampling ROC estimates and the true area under that curve:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/cv_est.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The correlations were highest (0.54) when the cost values were low (which is also where the model performed poorly). Under the best cost value, the correlation was even worse (0.01).</p>
<p>However, note that the 125 sample test set estimates do not appear to have a high fidelity to the true values either:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/test_est.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="the-good-news" class="level3">
<h3 class="anchored" data-anchor-id="the-good-news">The Good News</h3>
<p>We really shouldn’t care about this, or at least we are measuring the effectiveness in the wrong way. High correlation would be nice but could result in a strong relationship that does not reflect <em>accuracy</em> of the resampling procedure. This is basically the same argument that we make against using R<sup>2</sup>.</p>
<p>Let’s look at the root mean squared error (RMSE) instead. The RMSE can be decomposed into two quantities:</p>
<ul>
<li>the <em>bias</em> reflects how far the resampling estimate is from the true value (which we can measure in our simulations).</li>
<li>the <em>variance</em> of the resampling estimate</li>
</ul>
<p>RMSE is mostly the squared bias plus the variance.</p>
<p>Two things can be seem in the bias graph below. First, the bias is getting better as cost increases. This shouldn’t be a surprise since increasing the cost value coerces the SVM model to be more adaptive to the (training) data. Second, the bias scale is <strong>exceedingly small</strong> (since the area under the ROC curve is typically between 0.50 and 1.00). This is true even at its worst.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/model_bias.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The standard deviation curve below shows that the <em>model noise</em> is minimized when performance is best and resembles an inverted version of the curve shown in the Bad News section. This is because the SVM model is pushing against the best performance. As Tolstoy said, “all good models resemble one another, each crappy model is crappy in its own way.” (actually, <strong><em>he did not say this</em></strong>). However, note the scale again. These are not large numbers.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/model_stdev.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Looking at the RMSE of the model, which is the in the same units as the AUC values, the curve movies around a lot but the magnitude of the values are very low. This can obviously be affected by the size of the training set, but 500 samples is not massive for this particular simulation system.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/low_corr_rmse.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>So the results here indicate that:</p>
<ol type="1">
<li>yes the correlation is low but</li>
<li>the overall RMSE is very good.</li>
</ol>
<p>Accuracy is arguably a much better quality to have relative to correlation.</p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2017/4/24/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you"><code>http://appliedpredictivemodeling.com</code></a>)</p>


</section>

 ]]></description>
  <category>R</category>
  <category>resampling</category>
  <category>simulation</category>
  <category>support vector machines</category>
  <category>cross-validation</category>
  <guid>https://blog.aml4td.org/posts/do-resampling-estimates-have-low-correlation-to-the-truth-the-answer-may-shock-you/</guid>
  <pubDate>Mon, 24 Apr 2017 04:00:00 GMT</pubDate>
</item>
<item>
  <title>caret package plans</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/caret-package-plans/</link>
  <description><![CDATA[ 




<p>A few people have asked if anything is going to happen to <a href="http://topepo.github.io/caret/"><code>caret</code></a> now that I’m working at RStudio.</p>
<p>The answer is “very little will be different”.</p>
<p>More specifically:</p>
<ul>
<li><code>caret</code> will be around for a long time. I’m still using it for things too!</li>
<li>There will still be hills and valleys for development/support. That pattern already exists and will continue since I still have a “day job”.</li>
<li>As for new things coming out of Rstudio, there is likely to be a fair amount of overlap with <code>caret</code> (in terms of functionality). <code>caret</code> may be the most un<a href="http://tidyverse.org/">tidy</a> package out there; just take a look at any call to <code>train</code> or the other modeling functions. There wont be a <code>caret2</code> but probably a set of packages that overlap with <code>caret</code> in different ways (I thought about trolling and calling the first package <code>carrot</code>).</li>
<li><code>caret</code> is fairly focused (myopic?) since it concentrates on prediction. There are similar things that people might want to do where the quantities of interest might not be prediction of a number or class. For example, while you might want to make inferences on your linear mixed model, you might also want to report your resampled RMSE to prove that your model has some fidelity to the actual data.</li>
<li>There are some features that I want(ed) for <code>caret</code> that would be invasive changes or might break backwards compatibility. Those are more likely to end up in a new package.</li>
<li>While you might now want a tidyverse solution to modeling (and that’s fine), there will be some features in new pacakges that will be incentives. It is easier to add new stuff in a new system than to redefine the old. Hopefully, I’ve learned my lessons in regards to extensibility; while the user may not realize it, the innards of <code>caret</code> have been refactored more than once.</li>
</ul>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2017/2/2/caret-package-plans"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>caret</category>
  <guid>https://blog.aml4td.org/posts/caret-package-plans/</guid>
  <pubDate>Thu, 02 Feb 2017 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Working at RStudio</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/working-at-rstudio/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/working-at-rstudio/RStudio-Ball.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’ve joined Hadley’s team at <a href="https://www.rstudio.com/">RStudio</a>.</p>
<p>Unsurprisingly, I’ll be working on some modeling related R packages and infrastructure. It is very exciting and I’m looking forward to learning a lot and creating some cool things.</p>
<p>I’ve had a great time doing drug discovery at Pfizer for the last 12ish years and I’ll miss working with everyone there.</p>
<p>My contact info has been changed on my existing R packages and you can find me either using my personal email (<code>mxkuhn@gmail.com</code>), RStudio address (<code>max@rstudio.com</code>), or <a href="https://github.com/topepo">github page</a></p>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2016/11/28/working-at-rstudio"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R</category>
  <category>RStudio</category>
  <guid>https://blog.aml4td.org/posts/working-at-rstudio/</guid>
  <pubDate>Mon, 28 Nov 2016 05:00:00 GMT</pubDate>
</item>
<item>
  <title>2016 UK Tour</title>
  <dc:creator>Max Kuhn</dc:creator>
  <link>https://blog.aml4td.org/posts/2016-uk-tour/</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.aml4td.org/posts/2016-uk-tour/banner.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>I’ll be in the UK next week doing three talks in three days:</p>
<ul>
<li>First, I’ll be giving a talk at the <a href="http://www.meetup.com/rladies-london/events/233061594/">London R-Ladies meetup</a> on Monday October 3rd with perhaps the best title yet: <strong><em>Whose Scat Is That? An ‘Easily Digestible’ Introduction to Predictive Modeling and <code>caret</code></em></strong>.</li>
<li>On Tuesday, October 4th I’m giving a talk at the <a href="https://www.meetup.com/Cambridge-R-Users-Group-Meetup/events/234302826/">Cambridge RUG</a> on tuning hyperparameters using optimization algorithms. This is an extension of <a href="http://blog.revolutionanalytics.com/2016/06/bayesian-optimization-of-machine-learning-models.html">this blog post</a>.<br>
</li>
<li>Finally, on Wednesday (the 5th) at the fantastic <a href="http://www.ncs-conference.org/">Nonclinical Statistics Conference</a>, I’ll be speaking on <strong><em>Statistical Mediation in Early Discovery by Bayesian Analysis and Visualization</em></strong>. The banner image above is from this talk. Lots of priors and <a href="http://shiny.rstudio.com">shiny apps</a>.</li>
</ul>
<p>(This article was originally posted at <a href="https://appliedpredictivemodeling.com/blog/2016/9/26/2016-uk-tour"><code>http://appliedpredictivemodeling.com</code></a>)</p>



 ]]></description>
  <category>R user group</category>
  <category>R</category>
  <category>presentations</category>
  <guid>https://blog.aml4td.org/posts/2016-uk-tour/</guid>
  <pubDate>Mon, 26 Sep 2016 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
